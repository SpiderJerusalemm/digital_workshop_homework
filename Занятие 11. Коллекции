import timeit
import sys
class Point2D:
    def __init__(self, x, y):
        self.x = x
        self.y = y

class Point3D(Point2D):
    __slots__ = ('_z',)

    def __init__(self, x, y, z):
        super().__init__(x, y)
        self._z = z

    @property
    def z(self):
        return self._z

    @z.setter
    def z(self, value):
        raise AttributeError("Нельзя изменять координату z")


pt3 = Point3D(10, 20, 30)

print("x =", pt3.x)
print("y =", pt3.y)
print("z =", pt3.z)

# pt3.z = 40       
# pt3.extra = 100   
# print(pt3.__dict__)  



class NormalPoint:
    def __init__(self, x, y):
        self.x = x
        self.y = y

class SlotPoint:
    __slots__ = ('x', 'y')
    def __init__(self, x, y):
        self.x = x
        self.y = y

normal_points = [NormalPoint(0, 0) for _ in range(1000)]
slot_points   = [SlotPoint(0, 0)   for _ in range(1000)]

def test_normal():
    for p in normal_points:
        p.x += 1

def test_slot():
    for p in slot_points:
        p.x += 1

iterations = 1000
t_norm = timeit.timeit(test_normal, number=iterations)
t_slot = timeit.timeit(test_slot,   number=iterations)

size_norm = sys.getsizeof(normal_points[0])
size_slot = sys.getsizeof(slot_points[0])

print(f"NormalPoint: {t_norm:.4f} сек")
print(f"SlotPoint:   {t_slot:.4f} сек\n")
print(f"Размер NormalPoint: {size_norm} байт")
print(f"Размер SlotPoint:   {size_slot} байт")



class Student:
    __slots__ = ('name', 'age', 'grade')

    def __init__(self, name, age, grade):
        self.name = name
        self.age = age
        self.grade = grade

def average_grade(students):
    total = 0
    count = 0
    for s in students:
        total += s.grade
        count += 1
    return total / count if count else 0

students = [
    Student("Алиса", 20, 85),
    Student("Борис", 21, 92),
    Student("Виктория", 19, 78),
    Student("Георгий", 22, 88),
]

avg = average_grade(students)
print(f"Средняя оценка студентов: {avg:.2f}")
